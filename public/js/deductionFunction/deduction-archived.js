/* Archived Count */
const table_count_pos_main_Ar = document.getElementById("table-second");
const countSpans_count_pos_main_Ar = document.querySelector(".countArchive");
const rowCounts_count_pos_main_Ar = table_count_pos_main_Ar.querySelectorAll(".primary-table-row").length;
countSpans_count_pos_main_Ar.textContent = rowCounts_count_pos_main_Ar;

/* CheckBox and Printing*/
var checkboxes_archived = document.querySelectorAll('tbody.tbody-second input[type="checkbox"]');
var selectAll_archived = document.querySelector('thead.thead-second input[type="checkbox"]');
var rowst_archived = document.querySelectorAll('tbody.tbody-second .primary-table-row');

function selectAllRows_archived() {
  for (var i = 0; i < checkboxes_archived.length; i++) {
    checkboxes_archived[i].checked = selectAll_archived.checked;
    if (checkboxes_archived[i].checked) {
      rowst_archived[i].classList.add('selected');
    } else {
      rowst_archived[i].classList.remove('selected');
    }
  }
}

for (var i = 0; i < checkboxes_archived.length; i++) {
  checkboxes_archived[i].addEventListener('click', function () {
    var isChecked_archived = this.checked;
    var row_archived = this.parentNode.parentNode;
    if (isChecked_archived) {
      row_archived.classList.add('selected');
    } else {
      row_archived.classList.remove('selected');
    }
    if (document.querySelectorAll('tbody.tbody-second input[type="checkbox"]:checked').length === checkboxes_archived.length) {
      selectAll_archived.checked = true;
    } else {
      selectAll_archived.checked = false;
    }
  });
}
selectAll_archived.addEventListener('click', selectAllRows_archived);

var printBtn_archived = document.getElementById('print-archive');
printBtn_archived.addEventListener('click', function () {
  var selectedRows_archived = [];
  for (var i = 0; i < checkboxes_archived.length; i++) {
    if (checkboxes_archived[i].checked) {
      selectedRows_archived.push(rowst_archived[i]);
    }
  }
  var tableData_archived = `
  <div class="print-check">
  <table><thead>
  <tr>
  <th colspan="9" style="padding: 1rem; font-size: 1.1rem;">Deduction Data Archived</th>
  </tr><tr>
  <th>ID</th>
  <th></th>
  <th>Code</th>
  <th>Name</th>
  <th>Type</th>
  <th>Minimum Loan</th>
  <th>Description</th>
  <th>Date Deleted</th>
  </tr></thead><tbody></div>`;

  for (var i = 0; i < selectedRows_archived.length; i++) {
    var rowCells_archived = selectedRows_archived[i].querySelectorAll('td');
    tableData_archived += '<tr>';
    for (var j = 1; j < rowCells_archived.length; j++) {
      tableData_archived += '<td>' + rowCells_archived[j].textContent + '</td>';
    }
    tableData_archived += '</tr>';
  }
  tableData_archived += '</tbody></table>';
  var printWindow_archived = window.open('', '', 'height=500,width=800');
  printWindow_archived.document.write('<html><head><title>Generated by: BFAR Payroll System</title></head><body>');
  printWindow_archived.document.write(`
  <style>
  table {
    border-collapse: collapse;
    font-family: 'Roboto', sans-serif;
  } 
  td, th 
  {
    border: 1px solid black; 
    padding: 5px;
  }
  th {
    font-weight: bold;
  }
  td:nth-child(1), td:nth-child(8) {
    color: #2d6a4f;
  }
  td:nth-child(4) {
    font-weight: 600;
  }
  td:nth-child(2),
  th:nth-child(2) {
    display: none;
  }
  </style>`);
  printWindow_archived.document.write(tableData_archived);
  printWindow_archived.document.write('</body></html>');
  printWindow_archived.print();
});

/* Export to excel */
function exportToExcel_archived() {
    const tableBody_archived = document.getElementById("table-body2");
    const selectedRows_archived = tableBody_archived.querySelectorAll('input[type="checkbox"]:checked');
    if (selectedRows_archived.length === 0) {
      alert("Please select at least one row to export.");
      return;
    }
  
    const data_archived = [];
    const headers_archived = ["Id", "Code", "Name", "Type", "Description", "Date Deleted"];
  
    data_archived.push(headers_archived);
  
    selectedRows_archived.forEach((row) => {
      const rowData_archived = [];
      const tableRow_archived = row.closest("tr");
      const id_archived = tableRow_archived.querySelector("td:nth-child(2)").textContent.trim();
      const code_archived = tableRow_archived.querySelector("td:nth-child(4)").textContent.trim();
      const name_archived = tableRow_archived.querySelector("td:nth-child(5)").textContent.trim();
      const type_archived = tableRow_archived.querySelector("td:nth-child(6)").textContent.trim();
      const min_loan_archived = tableRow_archived.querySelector("td:nth-child(7)").textContent.trim();
      const description_archived = tableRow_archived.querySelector("td:nth-child(8)").textContent.trim();
      const dateDeleted_archived = tableRow_archived.querySelector(".delete_at").textContent.trim();
  
      rowData_archived.push(id_archived, code_archived, name_archived, type_archived, min_loan_archived, description_archived, dateDeleted_archived);
      data_archived.push(rowData_archived);
    });
    const worksheet_archived = XLSX.utils.aoa_to_sheet(data_archived);
    const workbook_archived = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook_archived, worksheet_archived, "Sheet1");
    XLSX.writeFile(workbook_archived, "Deduction_Archive.xlsx");
  }
  
  /* Search */
  const searchInput_archived = document.getElementById('search-input2');
  const tableRows_archived = document.querySelectorAll('tbody tr');
  
  searchInput_archived.addEventListener('input', () => {
    const searchTerm_archived = searchInput_archived.value.toLowerCase();
  
    tableRows_archived.forEach(row => {
      const id_archived = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
      const code_archived = row.querySelector('td:nth-child(4)').textContent.toLowerCase();
      const name_archived = row.querySelector('td:nth-child(5)').textContent.toLowerCase();
      const type_archived = row.querySelector('td:nth-child(6)').textContent.toLowerCase();
      const minimum_loan_archived = row.querySelector('td:nth-child(7)').textContent.toLowerCase();
      const description_archived = row.querySelector('td:nth-child(8)').textContent.toLowerCase();
      const deleted_at_archived = row.querySelector('td:nth-child(9)').textContent.toLowerCase();
  
      if (id_archived.includes(searchTerm_archived) || code_archived.includes(searchTerm_archived)
        || name_archived.includes(searchTerm_archived)
        || type_archived.includes(searchTerm_archived)
        || minimum_loan_archived.includes(searchTerm_archived)
        || description_archived.includes(searchTerm_archived)
        || deleted_at_archived.includes(searchTerm_archived)
        ) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });
  });

  /* Sorting */
const table_pos_maina = document.getElementById("table-second");
const rows_pos_maina = table_pos_maina.getElementsByTagName("tr");
const headerRow_pos_maina = rows_pos_maina[0];
const sortButtons_pos_maina = headerRow_pos_maina.getElementsByClassName("sort-btn");
for (let i = 0; i < sortButtons_pos_maina.length; i++) {
  const sortButton_pos_maina = sortButtons_pos_maina[i];

  sortButton_pos_maina.addEventListener("click", function () {
    const sortBy_pos_maina = sortButton_pos_maina.dataset.sortby;

    const sortDirection_pos_maina = sortButton_pos_maina.classList.contains("desc") ? "asc" : "desc";

    for (let j = 0; j < sortButtons_pos_maina.length; j++) {
      sortButtons_pos_maina[j].classList.remove("asc");
      sortButtons_pos_maina[j].classList.remove("desc");
    }
    sortButton_pos_maina.classList.add(sortDirection_pos_maina);

    let columnIndex_pos_maina;
    switch (sortBy_pos_maina) {
      case "id":
        columnIndex_pos_maina = 1;
        break;
      case "code":
        columnIndex_pos_maina = 3;
        break;
      case "name":
        columnIndex_pos_maina = 4;
        break;
      case "type":
        columnIndex_pos_maina = 5;
        break;
      case "min_loan":
        columnIndex_pos_maina = 6;
        break;
      case "deleted_at":
        columnIndex_pos_maina = 7;
        break;
      default:
        columnIndex_pos_maina = 0;
        break;
    }

    const rowsArray_pos_maina = Array.from(rows_pos_maina).slice(1);
    rowsArray_pos_maina.sort(function (a_pos_main, b_pos_main) {
      const aValue_pos_maina = a_pos_main.getElementsByTagName("td")[columnIndex_pos_maina].textContent.trim();
      const bValue_pos_maina = b_pos_main.getElementsByTagName("td")[columnIndex_pos_maina].textContent.trim();
      return sortDirection_pos_maina === "asc" ? aValue_pos_maina.localeCompare(bValue_pos_maina) : bValue_pos_maina.localeCompare(aValue_pos_maina);
    });
    rowsArray_pos_maina.forEach(function (row_pos_maina) {
      table_pos_maina.appendChild(row_pos_maina);
    });
  });
}

/* View Modal */
function showModal_del(rowv_del) {
  const id_del = rowv_del.cells[1].textContent;
  const code_del = rowv_del.cells[3].textContent;
  const name_del = rowv_del.cells[4].textContent;
  const type_del = rowv_del.cells[5].textContent;
  const minimum_loan_del = rowv_del.cells[6].textContent;
  const description_del = rowv_del.cells[7].textContent;
  const deleted_at_del = rowv_del.cells[8].textContent;
  const modalContent_del = `
  <div class="eye-modal-archive">
  <h2 class="eye-header">Allowance Archive</h2>
    <p><strong>ID: </strong>${id_del}</p>
    <p><strong>Code: </strong> ${code_del}</p>
    <p><strong>Name: </strong> ${name_del}</p>
    <p><strong>Type: </strong> ${type_del}</p>
    <p><strong>Minimum Loan: </strong> ${minimum_loan_del}</p>
    <p><strong>Description: </strong> ${description_del}</p>
    <p><strong>Time Deleted: </strong><span> ${deleted_at_del}<span></p>
  </div>
`;
  const modal_del = document.createElement('div');
  modal_del.classList.add('modalview');
  modal_del.innerHTML = modalContent_del;
  document.body.appendChild(modal_del);
  modal_del.addEventListener('click', (event) => {
    if (event.target === modal_del) {
      modal_del.remove();
    }
  });
}
const eyeIcons_del = document.querySelectorAll('.eye-main-pos2');
eyeIcons_del.forEach((icon) => {
  icon.addEventListener('click', (event) => {
    const rowe_del = event.target.closest('tr');
    showModal_del(rowe_del);
  });
});