/* Archived Count */
const table_count_pos_main_Ar = document.getElementById("table-second");
const countSpans_count_pos_main_Ar = document.querySelector(".countArchive");
const rowCounts_count_pos_main_Ar = table_count_pos_main_Ar.querySelectorAll(".primary-table-row").length;
countSpans_count_pos_main_Ar.textContent = rowCounts_count_pos_main_Ar;

/* Full Screen */
function openFullscreen(maxHeight) {
    const div_archived = document.querySelector('.all-table-container');
    const table_archived = div_archived.querySelector('.table-container-wrapper');
    table_archived.style.height = '90vh';
    if (div_archived.requestFullscreen) {
        div_archived.requestFullscreen();
    } else if (div_archived.webkitRequestFullscreen) {
        div_archived.webkitRequestFullscreen();
    } else if (div_archived.msRequestFullscreen) {
        div_archived.msRequestFullscreen();
    }
}

/* CheckBox and Printing*/
var checkboxes_archived = document.querySelectorAll('tbody.tbody-second input[type="checkbox"]');
var selectAll_archived = document.querySelector('thead.thead-second input[type="checkbox"]');
var rowst_archived = document.querySelectorAll('tbody.tbody-second .primary-table-row');

function selectAllRows_archived() {
  for (var i = 0; i < checkboxes_archived.length; i++) {
    checkboxes_archived[i].checked = selectAll_archived.checked;
    if (checkboxes_archived[i].checked) {
      rowst_archived[i].classList.add('selected');
    } else {
      rowst_archived[i].classList.remove('selected');
    }
  }
}

for (var i = 0; i < checkboxes_archived.length; i++) {
  checkboxes_archived[i].addEventListener('click', function () {
    var isChecked_archived = this.checked;
    var row_archived = this.parentNode.parentNode;
    if (isChecked_archived) {
      row_archived.classList.add('selected');
    } else {
      row_archived.classList.remove('selected');
    }
    if (document.querySelectorAll('tbody.tbody-second input[type="checkbox"]:checked').length === checkboxes_archived.length) {
      selectAll_archived.checked = true;
    } else {
      selectAll_archived.checked = false;
    }
  });
}
selectAll_archived.addEventListener('click', selectAllRows_archived);

var printBtn_archived = document.getElementById('print-archive');
printBtn_archived.addEventListener('click', function () {
  var selectedRows_archived = [];
  for (var i = 0; i < checkboxes_archived.length; i++) {
    if (checkboxes_archived[i].checked) {
      selectedRows_archived.push(rowst_archived[i]);
    }
  }
  var tableData_archived = `
  <div class="print-check">
  <table><thead>
  <tr>
  <th colspan="9" style="padding: 1rem; font-size: 1.1rem;">Employee Data</th>
  </tr><tr>
  <th>ID</th>
  <th>Status</th>
  <th></th>
  <th>Name</th>
  <th>Division</th>
  <th>Daily Rate</th>
  <th>Position</th>
  <th>Recorded Date</th>
  </tr></thead><tbody></div>`;

  for (var i = 0; i < selectedRows_archived.length; i++) {
    var rowCells_archived = selectedRows_archived[i].querySelectorAll('td');
    tableData_archived += '<tr>';
    for (var j = 1; j < rowCells_archived.length - 1; j++) {
      tableData_archived += '<td>' + rowCells_archived[j].textContent + '</td>';
    }
    tableData_archived += '</tr>';
  }
  tableData_archived += '</tbody></table>';
  var printWindow_archived = window.open('', '', 'height=500,width=800');
  printWindow_archived.document.write('<html><head><title>Generated by: BFAR Payroll System</title></head><body>');
  printWindow_archived.document.write(`
  <style>
  table {
    border-collapse: collapse;
    font-family: 'Roboto', sans-serif;
  } 
  td, th 
  {
    border: 1px solid black; 
    padding: 5px;
  }
  th {
    font-weight: bold;
  }
  td:nth-child(1), td:nth-child(8) {
    color: #2d6a4f;
  }
  td:nth-child(4) {
    font-weight: 600;
  }
  </style>`);
  printWindow_archived.document.write(tableData_archived);
  printWindow_archived.document.write('</body></html>');
  printWindow_archived.print();
});

function exportToExcel_archived() {
    const tableBody_archived = document.getElementById("table-body2");
    const selectedRows_archived = tableBody_archived.querySelectorAll('input[type="checkbox"]:checked');
    if (selectedRows_archived.length === 0) {
      alert("Please select at least one row to export.");
      return;
    }
  
    const data_archived = [];
    const headers_archived = ["Id", "Status", "Name", "Division", "Daily Rate", "Position", "Date Recorded", "Type", "Contact", "Birthdate", "Address", "Gender", "Email"];
  
    data_archived.push(headers_archived);
  
    selectedRows_archived.forEach((row_excel_archived) => {
      const rowData_archived = [];
      const tableRow_archived = row_excel_archived.closest("tr");
      const id_archived = tableRow_archived.querySelector("td:nth-child(2)").textContent.trim();
      const status_archived = tableRow_archived.querySelector(".wrapper-status").textContent.trim();
      const name_archived = tableRow_archived.querySelector("#full_name").textContent.trim();
      const division_archived = tableRow_archived.querySelector("td:nth-child(6)").textContent.trim();
      const dailyRate_archived = tableRow_archived.querySelector(".wrapper-money").textContent.trim();
      const position_archived = tableRow_archived.querySelector("td:nth-child(8)").textContent.trim();
      const dateRecorded_archived = tableRow_archived.querySelector(".created_at").textContent.trim();
  
      const extraRow_archived = tableRow_archived.nextElementSibling;
      const jobType_archived = extraRow_archived.querySelector(".job_type").textContent.trim();
      const contact_archived = extraRow_archived.querySelector("span:nth-child(2)").textContent.trim();
      const birthdate_archived = extraRow_archived.querySelector("span:nth-child(1)").textContent.trim();
      const address_archived = extraRow_archived.querySelector("span:nth-child(2)").textContent.trim();
      const gender_archived = extraRow_archived.querySelector("span:nth-child(1)").textContent.trim();
      const email_archived = extraRow_archived.querySelector("span:nth-child(2)").textContent.trim();
  
      rowData_archived.push(id_archived, status_archived, name_archived, division_archived, dailyRate_archived, position_archived, dateRecorded_archived, jobType_archived, contact_archived, birthdate_archived, address_archived, gender_archived, email_archived);
      data_archived.push(rowData_archived);
    });
    const worksheet_archived = XLSX.utils.aoa_to_sheet(data_archived);
    const workbook_archived = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook_archived, worksheet_archived, "Sheet1");
    XLSX.writeFile(workbook_archived, "export.xlsx");
  }
  